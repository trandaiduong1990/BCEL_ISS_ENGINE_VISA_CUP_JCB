/**
 * Copyright (c) 2007-2008 Trans-Info Pte Ltd. Singapore. All Rights Reserved.
 * This work contains trade secrets and confidential material of
 * Trans-Info Pte Ltd. Singapore and its use of disclosure in whole
 * or in part without express written permission of
 * Trans-Info Pte Ltd. Singapore. is prohibited.
 * Date of Creation   : Feb 25, 2008
 * Version Number     : 1.0
 *                   Modification History:
 * Date          Version No.         Modified By           Modification Details.
 */

package com.transinfo.tplus;

import java.io.File;
import java.io.FileNotFoundException;
import java.util.ArrayList;
import java.util.HashMap;

import org.apache.commons.digester.Digester;
import org.apache.commons.digester.xmlrules.DigesterLoader;

import com.transinfo.tplus.javabean.MessageHandler;



/**
 *  This class is customized exception class for TPlus.
 *  It will load all the Excpetion Messages from the Database.
 */
public class BaseConfig
{

	public static final String REQUEST_DATE_FORMAT  = "yyyyMMddhhmmss";
	public static final String STR_CURRENT_VER  = "1.0";
	public static String Version             	= "";
	public static boolean boolDebug             = true;
	public static String  strDebugFile           = "";
	public static String  strDebugMsgFile        = "";
	public static String  strDateFormatDebug     = "yyyy-MM-dd HH:mm:ss";
	public static String  strMerchantGMTOffset		 = "+08:00";

	public static String  strSMTPServer			= "" ;
	public static String  strSMTPPort    ;
	public static String  strSMTPUserName  = ""  ;
	public static String  strSMTPPassword  = ""  ;
	public static String  strSMTPFrom            	= "";
	public static String  strSMTPTo 	;
	public static String  strMailSubject         	= "";
	public static String  strMailBody            	= "";
	public static String  strMailSign            	= "";

	public static String  DBPoolName          	= "";
	public static String  JDBCDriver          	= "";
	public static String  JDBCURL             	= "";
	public static String  DBUserID            	= "";
	public static String  DBPassword          	= "";
	public static String  DBInitSize	        = "";
	public static String  DBMaxActive         	= "";
	public static String  DBMaxWait           	= "";
	public static String  strDateFormat   		= "dd/MM/yy HH:mm:ss";

	public static String  strAdminPort          = "";
	public static int    socketTimeout      	=  10000;
	public static String  strWorkerThread       = "";
	public static String  strDebug          	= "";
	public static String  strISOConfig 			= "";
	public static String  strISOIssuerConfig	= "";
	public static String  strSocketType 		= "";
	public static boolean boolMultiSocket        = false;

	private static String ATMSwitchName			= "";
	private static String Address				= "";

	public static String strHSMIP = "";
	public static String strHSMPort = "";
	public static String strIssuerIP = "";
	public static String strIssuerPort = "";

	public static String strCUPKeyIndex = "";

	protected static ArrayList messageHandler 	= null;
	public static HashMap   signonMap		= new HashMap();

	public static String  CUPSMSJDBCDriver = "";
	public static String  CUPSMSJDBCURL = "";
	public static String  CUPSMSDBUserID = "";
	public static String  CUPSMSDBPassword = "";
	public static String  CUPSMSDBInitSize = "";
	public static String  CUPSMSDBMaxActive = "";
	public static String  CUPSMSDBMaxWait = "";

	public static String  JCBDPKIndex = "";
	public static String  CUPDPKIndex = "";


	// TO BE REMOVED
	/*
	 * Mail Tab Parameters
	 */

	/**The Thread Id length
	 */
	public static final String LOGITEM_SEPERATOR = ";";

	/*
	 * Mail Port #
	 */
	public static int intMailPortNo = -1;

	/*
	 * Mail Server URL
	 */
	public static String strMailServer = "";

	/*
	 * Admin Mail ID
	 */
	public static String strAdminMailID = "";

	/**
	 * From Mail ID
	 */
	public static String strFromMailID = "";

	/**
	 * To Mail List
	 */
	public static String[] arrToMailList;


	/**
	 * To Mail Subject
	 */
	public static String strErrorMailSub = "ATM Switch Server has been shut down";

	/**
	 * To Mail Message
	 */
	public static String strErrorMailMsg = "ATM Switch Server has been shut down as there was some internal problem which requires immediate attention.\r\n\r\nError Detail: Error :<DYNERR>\r\n\r\n\r\n\r\nCaveat : This is a message automatically automatically generated by the MPI Server please do not reply to this message.";



	/**
	 *  The Server Startup Time
	 */
	public static String strServerId   ="0";

	/**true if TPlus able to read the INI file
	 */
	public static boolean boolReadINI = false;



	/* static
    {
        loadProperties();
    }*/

	/**
	 * This method load the properties from the Config File
	 * to the config static variables.
	 */
	public static boolean loadProperties()throws TPlusException
	{
		try
		{

			File inputXMLFile = new File("SwitchConfig.xml");
			File rules = new File("SwitchConfigRules.xml");


			Digester digester = DigesterLoader.createDigester(rules.toURL());
			BaseConfig company = (BaseConfig)digester.parse(inputXMLFile);
			validateConfigData();

			boolReadINI = true;

		}
		catch(FileNotFoundException fileExp)
		{
			TPlusPrintOutput.printMessage("BaseConfig","INI File Loading Failed !!!! Error= "+fileExp.toString());
			new TPlusException(TPlusCodes.INI_FILE_ERR,fileExp.toString());
		}

		catch (Exception exp)
		{
			TPlusPrintOutput.printMessage("BaseConfig","Propeties loading Failed !!!!");
			TPlusPrintOutput.printMessage("BaseConfig","Error : " + exp.toString());
			new TPlusException(TPlusCodes.IO_ERR_INI,exp.toString());


		}

		return boolReadINI;

	}


	public static void setName(String name){
		ATMSwitchName = name;
	}

	public static String getName(){

		return ATMSwitchName;
	}

	public static void setAddress(String address){

		Address = address;
	}

	public static String getAddress(){

		return Address;
	}

	public static void addMessageHandler(MessageHandler msgHandler){

		messageHandler.add(msgHandler);
	}

	public static ArrayList getMessageHandler()
	{

		return messageHandler;
	}



	public static  boolean isBoolDebug() {
		return boolDebug;
	}
	public static  void setBoolDebug(boolean boolDebug) {
		boolDebug = boolDebug;
	}
	public static  String getDateFormat() {
		return strDateFormat;
	}
	public static  void setDateFormat(String dateFormat) {
		strDateFormat = dateFormat;
	}
	public static  String getDateFormatDebug() {
		return strDateFormatDebug;
	}
	public static  void setDateFormatDebug(String dateFormatDebug) {
		strDateFormatDebug = dateFormatDebug;
	}
	public static  String getDBInitSize() {
		return DBInitSize;
	}
	public static  void setDBInitSize(String initSize) {
		DBInitSize = initSize;
	}
	public static  String getDBMaxActive() {
		return DBMaxActive;
	}
	public static  void setDBMaxActive(String maxActive) {
		DBMaxActive = maxActive;
	}
	public static  String getDBMaxWait() {
		return DBMaxWait;
	}
	public static  void setDBMaxWait(String maxWait) {
		DBMaxWait = maxWait;
	}
	public static  String getDBPassword() {
		return DBPassword;
	}
	public static  void setDBPassword(String password) {
		DBPassword = password;
	}
	public static String getDBPoolName() {
		return DBPoolName;
	}
	public static void setDBPoolName(String poolName) {
		DBPoolName = poolName;
	}
	public static String getDBUserID() {
		return DBUserID;
	}
	public static void setDBUserID(String userID) {
		DBUserID = userID;
	}
	public static String getJDBCDriver() {
		return JDBCDriver;
	}
	public static void setJDBCDriver(String driver) {
		JDBCDriver = driver;
		System.out.println("JDBCDriver="+JDBCDriver);
	}
	public static String getJDBCURL() {
		return JDBCURL;
	}
	public static void setJDBCURL(String jdbcurl) {
		JDBCURL = jdbcurl;
	}
	public static String getMailBody() {
		return strMailBody;
	}
	public static void setMailBody(String mailBody) {
		strMailBody = mailBody;
	}
	public static String getMailSign() {
		return strMailSign;
	}
	public static void setMailSign(String mailSign) {
		strMailSign = mailSign;
	}
	public static String getMailSubject() {
		return strMailSubject;
	}
	public static void setMailSubject(String mailSubject) {
		strMailSubject = mailSubject;
	}
	public static String getSMTPFrom() {

		return strSMTPFrom;
	}
	public static void setSMTPFrom(String from) {
		strSMTPFrom = from;
	}
	public static String getSMTPPort() {
		return strSMTPPort;
	}
	public static void setSMTPPort(String port) {
		strSMTPPort = port;
	}
	public static String getSMTPServer() {
		return strSMTPServer;
	}
	public static void setSMTPServer(String server) {
		strSMTPServer = server;
	}
	public static String getSMTPUserName() {
		return strSMTPUserName;
	}
	public static void setSMTPUserName(String username) {
		strSMTPUserName = username;
	}
	public static String getSMTPPassword() {
		return strSMTPPassword;
	}
	public static void setSMTPPassword(String password) {
		strSMTPPassword = password;
	}
	public static String getSMTPTo() {
		return strSMTPTo;
	}
	public static void setSMTPTo(String to) {
		strSMTPTo = to;
	}
	public static String getVersion() {
		return Version;
	}
	public static void setVersion(String version) {
		Version = version;
	}

	public static String getAdminPort() {
		return strAdminPort;
	}
	public static void setAdminPort(String adminPort) {
		strAdminPort = adminPort;
	}

	public static int getSocketTimeout() {
		return socketTimeout;
	}
	public static void setSocketTimeout(String sockTimeout) {

		socketTimeout = new Integer(sockTimeout).intValue();
	}

	public static String getWorkerPoolThreads() {
		return strWorkerThread;
	}
	public static void setWorkerPoolThreads(String workerThread) {
		strWorkerThread = workerThread;
	}

	public static String getDebug() {
		return strDebug;
	}
	public static void setDebug(String debug) {
		strDebug = debug;
		if(strDebug!=null || !strDebug.equals(""))
			boolDebug  = new Boolean(strDebug).booleanValue();
	}

	public static String getDebugFile() {
		return strDebugFile;
	}
	public static void setDebugFile(String debugFile) {
		strDebugFile = debugFile;
	}

	public static String getDebugDumpFile() {
		return strDebugMsgFile;
	}
	public static void setDebugDumpFile(String debugFile) {
		strDebugMsgFile = debugFile;
	}
	public static String getISOConfig() {
		return strISOConfig;
	}
	public static void setISOConfig(String ISOConfig) {
		strISOConfig = ISOConfig;
	}

	public static String getISOIssuerConfig() {
		return strISOIssuerConfig;
	}
	public static void setISOIssuerConfig(String ISOIssuerConfig) {
		strISOIssuerConfig = ISOIssuerConfig;
	}

	public static boolean isMultipleSocket() {
		return boolMultiSocket;
	}
	public static void setMultipleSocket(String multipleSocket) {

		if(multipleSocket!=null || !multipleSocket.equals(""))
			boolMultiSocket  = new Boolean(multipleSocket).booleanValue();

	}


	public static void setCUPKeyIndex(String CUPKeyIndex)
	{
		strCUPKeyIndex = CUPKeyIndex;
	}

	public static String getCUPKeyIndex()
	{
		return strCUPKeyIndex;
	}


	public static void setHSMIP(String HSMIP)
	{
		strHSMIP = HSMIP;

	}

	public static String getHSMIP()
	{
		return strHSMIP;
	}

	public static void setIssuerIP(String IssuerIP)
	{
		strIssuerIP = IssuerIP;

	}

	public static String getIssuerIP()
	{
		return strIssuerIP;
	}

	public static void setHSMPort(String HSMPort)
	{
		strHSMPort = HSMPort;

	}

	public static String getHSMPort()
	{
		return strHSMPort;
	}

	public static void setIssuerPort(String IssuerPort)
	{
		strIssuerPort = IssuerPort;

	}

	public static String getIssuerPort()
	{
		return strIssuerPort;
	}


	public String toString(){

		StringBuffer buffer = new StringBuffer("getMessageHandler: " + this.ATMSwitchName);
		buffer.append("\nlocated at: " + this.Address);

		buffer.append("\nhas " + this.messageHandler.size() + " Message Handlers.");

		return buffer.toString();

	}


	/**
	 * 	This method validate the config data.
	 */

	public static void validateConfigData()
	{

		if(getJDBCDriver().equals("") || getJDBCURL().equals("") || getDBUserID().equals("") ||
				getDBPassword().equals("") || getDBInitSize().equals("") || getDBMaxActive().equals("") || getDBMaxWait().equals(""))
			TPlusPrintOutput.printMessage("BaseConfig"," Some of the DB values are not configured correctly");

		if(getSMTPServer().equals("") || getSMTPPort().equals("") || getSMTPFrom().equals("") ||
				getSMTPTo().equals("") || getMailSubject().equals("") || getMailBody().equals("") || getMailSign().equals(""))
			TPlusPrintOutput.printMessage("BaseConfig"," Some of the SMTP values are not configured correctly");

		if(getAdminPort().equals("") || getWorkerPoolThreads().equals("") ||
				getDebug().equals("") || getDebugFile().equals("") || getISOConfig().equals(""))
			TPlusPrintOutput.printMessage("BaseConfig"," Some of the Server values are not configured correctly");

	}



	/**
	 * This method load all the error messages.
	 */

	/*    public static HashMap loadErrors() throws Exception
    {
        return ConfigDB.getErrorCodes();
    }

	 */


	/**
	 * checks if the passed string is numeric
	 * @param String
	 * @return true if the string is a number
	 */
	public static boolean isNumeric(String s) {

		if( s == null || s.trim().equals("") )
			return false;

		for (int i = 0; i < s.length(); i++) {
			if ( !Character.isDigit(s.charAt(i)) ) {
				return false;
			}
		}

		return true;
	}


	/**
	 * checks if the passed string is double
	 * @param String
	 * @return true if the string is a double
	 */
	public static boolean isDouble(String s) {

		if( s == null || s.trim().equals("") )
			return false;

		try
		{
			Double d = new Double(s);
			if(d.isNaN())
				return false;
			else
				return true;
		}
		catch(Exception e)
		{
			return false;
		}

	}


	public static void main(String s[])throws TPlusException
	{
		loadProperties();
	}


	public static String getCUPSMSJDBCDriver() {
		return CUPSMSJDBCDriver;
	}


	public static void setCUPSMSJDBCDriver(String cUPSMSJDBCDriver) {
		CUPSMSJDBCDriver = cUPSMSJDBCDriver;
	}


	public static String getCUPSMSJDBCURL() {
		return CUPSMSJDBCURL;
	}


	public static void setCUPSMSJDBCURL(String cUPSMSJDBCURL) {
		CUPSMSJDBCURL = cUPSMSJDBCURL;
	}


	public static String getCUPSMSDBUserID() {
		return CUPSMSDBUserID;
	}


	public static void setCUPSMSDBUserID(String cUPSMSDBUserID) {
		CUPSMSDBUserID = cUPSMSDBUserID;
	}


	public static String getCUPSMSDBPassword() {
		return CUPSMSDBPassword;
	}


	public static void setCUPSMSDBPassword(String cUPSMSDBPassword) {
		CUPSMSDBPassword = cUPSMSDBPassword;
	}


	public static String getCUPSMSDBInitSize() {
		return CUPSMSDBInitSize;
	}


	public static void setCUPSMSDBInitSize(String cUPSMSDBInitSize) {
		CUPSMSDBInitSize = cUPSMSDBInitSize;
	}


	public static String getCUPSMSDBMaxActive() {
		return CUPSMSDBMaxActive;
	}


	public static void setCUPSMSDBMaxActive(String cUPSMSDBMaxActive) {
		CUPSMSDBMaxActive = cUPSMSDBMaxActive;
	}


	public static String getCUPSMSDBMaxWait() {
		return CUPSMSDBMaxWait;
	}


	public static void setCUPSMSDBMaxWait(String cUPSMSDBMaxWait) {
		CUPSMSDBMaxWait = cUPSMSDBMaxWait;
	}


	public static String getJCBDPKIndex() {
		return JCBDPKIndex;
	}


	public static void setJCBDPKIndex(String jCBDPKIndex) {
		JCBDPKIndex = jCBDPKIndex;
	}


	public static String getCUPDPKIndex() {
		return CUPDPKIndex;
	}


	public static void setCUPDPKIndex(String cUPDPKIndex) {
		CUPDPKIndex = cUPDPKIndex;
	}

}

